/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Chevin API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum FuelType {
    Unknown = <any> 'Unknown',
    DL = <any> 'DL',
    UL = <any> 'UL',
    ULP = <any> 'ULP'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum OdometerType {
    Unknown = <any> 'Unknown',
    K = <any> 'K',
    M = <any> 'M'
}

/**
 * 
 * @export
 * @interface VehicleDetailsDtos
 */
export interface VehicleDetailsDtos {
    /**
     * 
     * @type {string}
     * @memberof VehicleDetailsDtos
     */
    registration?: string;
    /**
     * 
     * @type {VehicleStatus}
     * @memberof VehicleDetailsDtos
     */
    status?: VehicleStatus;
    /**
     * 
     * @type {string}
     * @memberof VehicleDetailsDtos
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof VehicleDetailsDtos
     */
    makeCode?: string;
    /**
     * 
     * @type {string}
     * @memberof VehicleDetailsDtos
     */
    modelCode?: string;
    /**
     * 
     * @type {string}
     * @memberof VehicleDetailsDtos
     */
    bodyType?: string;
    /**
     * 
     * @type {Date}
     * @memberof VehicleDetailsDtos
     */
    onFleetDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof VehicleDetailsDtos
     */
    countryCode?: string;
    /**
     * 
     * @type {FuelType}
     * @memberof VehicleDetailsDtos
     */
    fuelType?: FuelType;
    /**
     * 
     * @type {number}
     * @memberof VehicleDetailsDtos
     */
    mpg?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleDetailsDtos
     */
    costPerMile?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleDetailsDtos
     */
    costPerKM?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleDetailsDtos
     */
    odometerReading?: number;
    /**
     * 
     * @type {OdometerType}
     * @memberof VehicleDetailsDtos
     */
    odometerType?: OdometerType;
    /**
     * 
     * @type {Date}
     * @memberof VehicleDetailsDtos
     */
    odometerDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof VehicleDetailsDtos
     */
    motDueDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof VehicleDetailsDtos
     */
    insuranceDueDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof VehicleDetailsDtos
     */
    taxDueDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof VehicleDetailsDtos
     */
    datePurchased?: Date;
    /**
     * 
     * @type {Date}
     * @memberof VehicleDetailsDtos
     */
    dateRegistered?: Date;
}

/**
 * 
 * @export
 * @interface VehicleDetailsResponse
 */
export interface VehicleDetailsResponse {
    /**
     * 
     * @type {boolean}
     * @memberof VehicleDetailsResponse
     */
    success?: boolean;
    /**
     * 
     * @type {VehicleDetailsDtos}
     * @memberof VehicleDetailsResponse
     */
    vehicleDetails?: VehicleDetailsDtos;
}

/**
 * 
 * @export
 * @interface VehicleListItemDtos
 */
export interface VehicleListItemDtos {
    /**
     * 
     * @type {string}
     * @memberof VehicleListItemDtos
     */
    registration?: string;
    /**
     * 
     * @type {VehicleStatus}
     * @memberof VehicleListItemDtos
     */
    status?: VehicleStatus;
    /**
     * 
     * @type {string}
     * @memberof VehicleListItemDtos
     */
    description?: string;
    /**
     * 
     * @type {FuelType}
     * @memberof VehicleListItemDtos
     */
    fuelType?: FuelType;
    /**
     * 
     * @type {number}
     * @memberof VehicleListItemDtos
     */
    odometerReading?: number;
    /**
     * 
     * @type {string}
     * @memberof VehicleListItemDtos
     */
    countryCode?: string;
}

/**
 * 
 * @export
 * @interface VehicleListResponse
 */
export interface VehicleListResponse {
    /**
     * 
     * @type {Array<VehicleListItemDtos>}
     * @memberof VehicleListResponse
     */
    items?: Array<VehicleListItemDtos>;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum VehicleStatus {
    Unknown = <any> 'Unknown',
    LiveOnFleet = <any> 'LiveOnFleet',
    VOR = <any> 'VOR',
    AwaitingDisposal = <any> 'AwaitingDisposal',
    PreFleet = <any> 'PreFleet'
}


/**
 * VehicleApi - fetch parameter creator
 * @export
 */
export const VehicleApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [registration] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleGetVehicleDetailsPost(registration?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/Vehicle/GetVehicleDetails`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (registration !== undefined) {
                localVarFormParams.set('Registration', registration as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleGetVehiclesPost(options: any = {}): FetchArgs {
            const localVarPath = `/api/Vehicle/GetVehicles`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleApi - functional programming interface
 * @export
 */
export const VehicleApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [registration] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleGetVehicleDetailsPost(registration?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VehicleDetailsResponse> {
            const localVarFetchArgs = VehicleApiFetchParamCreator(configuration).apiVehicleGetVehicleDetailsPost(registration, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleGetVehiclesPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VehicleListResponse> {
            const localVarFetchArgs = VehicleApiFetchParamCreator(configuration).apiVehicleGetVehiclesPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * VehicleApi - factory interface
 * @export
 */
export const VehicleApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} [registration] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleGetVehicleDetailsPost(registration?: string, options?: any) {
            return VehicleApiFp(configuration).apiVehicleGetVehicleDetailsPost(registration, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleGetVehiclesPost(options?: any) {
            return VehicleApiFp(configuration).apiVehicleGetVehiclesPost(options)(fetch, basePath);
        },
    };
};

/**
 * VehicleApi - object-oriented interface
 * @export
 * @class VehicleApi
 * @extends {BaseAPI}
 */
export class VehicleApi extends BaseAPI {
    /**
     * 
     * @param {string} [registration] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public apiVehicleGetVehicleDetailsPost(registration?: string, options?: any) {
        return VehicleApiFp(this.configuration).apiVehicleGetVehicleDetailsPost(registration, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public apiVehicleGetVehiclesPost(options?: any) {
        return VehicleApiFp(this.configuration).apiVehicleGetVehiclesPost(options)(this.fetch, this.basePath);
    }

}

